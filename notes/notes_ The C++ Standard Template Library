These notes will be brief, this is not a book that particularly lends itself to notes.

CHAPTER 3, NEW C++11 LANGUAGE FEATURES:
-nullptr does not automatically convert to an integer of 0 the way NULL does. This used to cause problems with multiple function definitions choosing between a pointer type of an integer type when passed a value of NULL, apparently.
-auto can be used to deduce the type from its initializer:
  auto x = 7;
  static auto word = "text";        // it works with static as well, apparently

-auto is especially useful if the typename is long, like with iterators.
-old implementations of C++ had confusing initialization syntax: braces, parentheses, with or without =.
-C++11 allows one syntax for all initializations: initializer lists, which are {} and no = sign:
  int values[] {1, 2, 3};
  std::vector<int> {3, 4, 5};
  std::vector<std::string> cities {"Berlin", "Atlanta"};

-the empty initializer lists can also be used to initialize all values to 0, nullptr, or whatever else:
  int i;        // i is undefined
  int j{};      // j is 0
  int* p;
  int* q{};

-the only limit of initializer lists is they won't truncate floats to ints or narrow other values. old methods still do that
-there's also a type std::initializer_list which you can use to pass initializer lists to functions and so on.
-if you had a constructor defined to use std::initializer_list as its single parameter, you would invoke it with the regular initializer list syntax:
  type x{...};

-by default, initialization lists will be automatically type converted to parameters for constructors that match the lists parameters. this can be disabled with adding the keyword explicit before the constructors
-there's new for: loop syntax, i.e. range based for loop that brings C++ more in line with python.
  for (int x : {1, 2, 3, 5, 8, 11}){}
  ...
  std::vector<double> vect;
  for (const auto& x : vect){}   // for containers, x must be a reference so the container is modified & no copying occurs. the author suggests making it const but it isn't clear why
  ...
  int array[] {1, 3, 7, 9, 12, 24};
  for (int x : array){}

-for: loops work with initialization lists because the lists are iterables; they have .end() and .begin() methods, like iterators.
-for: loops also work with typical arrays
-the move() function in <utility> can be used to convert an object to an r-value reference (i.e. int&&).
-You'd do this if you don't need the object anymore and want to avoid copying it when passing it. It's similar to a normal reference, you just don't need the reference in the main code any more.
-in the classes you're passing this to you provide an overloaded method, a move constructor. within that move constructor you'd use pointers and internal arrays to the element to directly access its data and not copy it.
-all the types in the STL have a move constructor, so you can use move() freely with them.
-for example, a move constructor for a string would just point to the old string instead of copying a new string.
-in the move constructor, you must make sure the old object doesn't get destroyed in the future. to do this, you do something like give all its members a new value of null, thus stealing its contents entirely.
-you also should clear the contents of *this because the object might hold resources such as locks, apparently
-if there is no move constructor, the copy constructor is used by default.
-after a move, the original object is in an undefined state. to use it again you must assign it new values.
  int& operator=(const int& lvalue);      // copy assignment operator
  int& operator=(int&& rvalue);           // move assignment operator

-if no move constructor is provided, sometimes a copy constructor will default to being used (if it's const)
-some classes in the STL only have move constructors defined - file streams, string streams. all operations become move operations
-the move() function shouldn't be used on return values, they're already handled appropriately by C++. to be used as an r value the returned parameter must be static or non-local
-remember raw strings that circumvent escape characters: R"(\\n)" instead of "\\\\n" to write the literal \\n.
-to get () in a raw string, you tack on combos of random digits for delimiters at the edges: R"nc(\\n())nc"
-raw strings are useful when writing regex's
-there's a noexcept keyword that disallows a function from throwing exceptions, and instead the function will terminate the program immediately
-runtime exception checking requires overhead, so this saves overhead
-templated programs are hard to write exception specifications for, so this just simply saves resources & turns off runtime checking
  void func() noexcept;

-this is a viable alternative to extensive checking with throw(), which incurs overhead
-the noexcept keyword should at least be used with library functions / destructors, and functions designed for compatibility with C code
-you can also specify a conditional noexcept. The C++ standards committee states this should be done for move constructors and swap functions, but nothing else:
  void swap (int& x, int& y) noexcept(noexcept(x.swap(y))){x.swap(y);}
  pair& operator=(pair&& p) noexcept(is_nothrow_move_assignable<T1>::value && is_nothrow_move_assignable<T2>::value);   // move constructor for a templated pair

-there's a constexpr keyword that allows expressions to be evaluated at compile time:
  constexpr int square(int x){
    return x * x;
  }
  float a[square(9)];     // evaluated at compile time

-templates can have a variable number of arguments also. They arguments are all of different types:
  template <typename T, typename... Tx>
  void print (const T& arg1, const Tx&... argx){       // the ... here is actually an operator, no further details given
    std::cout << arg1;
    print(argx...);                                    //
  }

-the formal syntax for lambdas is:
  auto variable = [capture] (parameters) mutable throwSpec -> returnType {   // all these are optional, but if any one of them are used the parenthesis become mandatory
    ...
    return returnType;
  }

  auto lamb_1 = [] (string& s){
    cout << s << "\n";
  }
  lamb_1("...");

-the capture is used to specify access to nonstatic objects outside the lambdas scope that aren't passed as arguments.
-passing the symbols = or & as the capture specifier will cause the lambda to access outer scope nonstatic objects with pass-by-value or pass-by-reference
-you can also specify individual variables:
  auto lamb_1 = [=] { ... }
  auto lamb_2 = [x, &y] { ... }       // x is pass-by-value, y is pass-by-reference
  auto lamb_3 = [=, &y] { ... }       // all are pass-by-value except y

-unless you specify mutable, you cannot modify the pass-by-value variables within the lambda, only read from them. if you try it will cause an error.
-each lambda function object has its own unique type. functor is another name for function object
-to declare variables to hold the lambda, use auto; or if inside a class or function, templates are optional
-use decltype() to pass the lambda to a container as a hash function, ordering, or sorting callback
-to use lambdas in functional programming with closures, you can use the <functional> header file:

  #include <functional>

  std::function<int(int, int)> returnLambda() {       // std::function<int(int, int)> is the function returning a lambda object
    return [] (int x, int y) {                        // returnLambda appears to be the outer function in a closure
      return x * y;
    };
  }

  int main(){
    auto lamb_1 = returnLambda();
    cout << lamb_1(12, 15);
  }

-decltype() will actually return a type, and can be used in place of a type. it takes an expression or a variable as its parameter
-decltype can be used to specify a function return type, or to pass the type of a lambda.
-sometimes the return type of the function depends on an expression that uses the arguments. using decltype & a new syntax, you can rewrite the return type after the parameters:

  template <typename T1, typename T2>           // does not work, the variables in decltype are not yet passed to the argument list
  decltype(x + y) function_name(T1 x, T2 y);
  ...
  template <typename T1, typename T2>           // the rewritten version where the return type is evaluated after the parameters are passed
  auto add(T1 x, T2 y) -> decltype(x + y);

-there are scoped enumerations which prevent automatic coercion problems in the global scope;
  enum class instruments : char { guitar, banjo, fiddle, drums };         // : char syntax is optional; changes the enum type from the default int
  ...                                                                         // the class keyword makes it a scoped enum
  char char_flag = instruments::drums;

-C++11 now has a long long type
-nontype parameters are also part of C++, and can be passed as template arguments. the following declares two totally different data types:
  bitset<32> flags32;               // bitset creates a bit field of 32 bits.
  bitset<53> flags53;

-templates can also have default arguments, where you can then specify an optional number of template arguments:
  template <typename T1, typename T2 = vector<T1>>        // the default parameters can also use previous template parameters to define the default arguments

-the original use of typename was to specify within templates that there's a subtype of the template parameter which is itself a type rather than a static attribute:
  template <typename T>
  class class_1{
    typename T::SubType * ptr;        // subtype is an actual data type defined in the template parameters class
    ...
  }
  class Q {
    typedef int SubType;              // the passed class must implement the type
    ...
  }
  class_1<Q> x;

-you can have templates inside classes for specific member functions. just write template right above the function prototype in the class
-you can use this feature to help implement automatic type conversion in templated classes. by default, template arguments don't have any type conversion; but a setter function with its own separate templated argument can take advantage of type conversion when it's initializing a templated member variable. see book pg 35 for more details.
-you can also supply a templated constructor. often this will be the copy constructor, to allow for coercion while copying objects of one type to another (double to int, etc.).
-note that if you supply a templated copy constructor, the implicit copy constructor is not suppressed. the templated constructor will be invoked if the two types involved in the copy operation differ. if they don't, the implicit constructor is used. thus you must still override the default copy constructor if desired
-fundamental types are initialized to zero by calling their constructor without arguments, or by using their initialization list:
  int i1;           // undefined
  int i2 = int();   // 0
  int i3 = int{};   // 0

-the above feature allows you to initialize templated arguments to 0 appropriately:
  template <typename T>
  void f(){
    T variable = T();
  }

-the syntax for main w/ args is:
  int main (int argc, char* argv[]){
    ...
  }                     // return is not required in C++, only in C

-ways to terminate a C++ program early: exit(), quick_exit(), terminate()

_________________________________________________________________________________________________
CHAPTER 4 - GENERAL CONCEPTS:

-all components in the STL use the std namespace
-there are different namespaces nested within the std: std::rel_ops, std::chrono, std::placeholders, std::regex_constants, std::this_thread
-there are 3 ways of using a namespace, and they actually differ in local vs global scope also:
  using namespace std;                      // all identifiers will be globally available
  using std::cout;                          // cout will be locally available only
  std::cout << "...";

-C++11 STL headers don't have .h extensions, and old C headers that use .h are instead prefixed with c:
-for backwards compatibility you can optionally include old C headers using .h
  #include <iostream>
  #include <cstdlib>        // stdlib.h
  #include <stdlib.h>       // old form. all identifiers will be globally available automatically with this form

-the base class for all exception classes is called exception, defined in the <exception> header. sub-exceptions are haphazardly strewn throughout their relevant headers.
-if working with a library, to handle all potential exceptions, you have to include all sub-exception headers
-exceptions are divided into language support, logic errors, & runtime errors
-the book distinguishes between error codes & conditions. codes are just codes and can be implementation specific, conditions are portable abstractions.
-one runtime error worth recognizing is bad_alloc, which is thrown when a call to new fails. this can occur in any program if it runs out of memory
-what() is a member function inherited by all exception classes that gives additional information on the error.
-for exceptions defined <system_error>, <ios>, and <future>, code() can be used. It returns an error object.
-system_error produces conditions, and <ios> / <future> produce codes, but both can be handled the same ways via the object, apparently:

  // general error handling program
  // include all sub-exception header files
  #include <exception>          // classes exception and bad_exception. bad_exception handles unknown exceptions
  #include <stdexcept>          // most logic and runtime error classes
  #include <system_error>       // system errors. use w/ std::errc:: scoped enumerator & cerrno
  #include <new>                // out of memory errors
  #include <ios>                // i/o errors.
  #include <future>             // async and futures errors.
  #include <typeinfo>           // type errors
  ...

  // function for handling code object, used with <ios>, <future>, <system_error>
  template <typename T>
  void processCodeError (const T& e){                           // for <ios> or <future> apparently
    auto c = e.code();
    cerr << "error code category: " << c.category().name() << "\n";
    cerr << "error code category > error value: " << c.value() << "\n";
    cerr << "message: " << c.message() << "\n";
    cerr << "corresponding error condition: " << c.default_error_condition().category().name() << "\n";
    cerr << "error condition value: " << c.default_error_condition().value() << "\n";
    cerr << "error condition message: " << c.default_error_condition().message() << "\n";
  }

  // function for detecting the type of error and responding appropriately
  void detectErrorType(){                                   // detect & handle different errors using code() or what()
    try{
      throw;                                                // rethrows the exception, apparently - allows you to deal with it inside the function
    } catch (const ios_base::failure& e) {                    // errors for <ios>, <future>, <system_error> handled with a code object
      cerr << "I/O Error: " << e.what() << "\n";
      processCodeError(e);
    } catch (const system_error& e) {
      cerr << "System Error: " << e.what() << "\n";
      processCodeError(e);                                  // in the printout, if the system errors category is generic, the value will correspond with codes in <cerrno>
    } catch (const future_error& e) {
      cerr << "Future Error: " << e.what() << "\n";
      processCodeError(e);
    } catch (const bad_alloc& e){                             // errors handled normally, not with a code object
      cerr << "Bad Alloc Error: " << e.what() << "\n";
    } catch (const exception& e){
      cerr << "general error: " << e.what() << "\n";
    }
    // define any other normal errors not handled with a code object
  }

  int main(){
    try {
      ...
    } except {
      detectErrorType();
    }
  }

-system_errors category of generic exceptions (not system exceptions) have values that correspond to definitions in <cerrno>.
-apparently an advanced programmer can do things like interpret the type of exception and respond (i.e. bad_alloc > code to get more memory)
-C++11 also has exception pointers to store an exception objects address for later processing:

  #include <exception>
  std::exception_ptr eptr;
  try {
    throw ...;
  } catch (...) {
    eptr = std::current_exception();        // current_exception() returns an exception pointer to the currently handled exception
  }
  ...
  if (eptr != nullptr){
    std::rethrow_exception(eptr);            // rethrow exception, allows you to rehandle it as desired
  }

-the above features are useful in multithreaded programs, you can pass exceptions between threads
-your code can be written to proactively throw exceptions.
-for the exceptions that just use what(), the exception constructor takes a string argument describing it.
-<system_error>, <ios>, & <future> have their own unique constructors for error objects (which don't match eachother):

  throw out_of_range ("out of range, sorry");                                                     // normal what() exception
  throw system_error (make_error_code(errc::invalid_argument), "argument ... is not valid");      // system_error also uses make_error_code(errc::_____)

-you cant manually throw exceptions of the exception base class type, or compile time exceptions like bad_cast, bad_typeid
-you can also define your own exceptions that inherit from the base exception class, just make sure to implement what() appropriately
-bind() and async() are STL functions that work with callable objects - notably functions, functors, and lambdas
-async() can run a background task using the callable object:

  void function_1 (int x, int  y);
  async(function_1, 27, 33);

-thread_local is a keyword that can be used for defining thread specific variables, no further detail
-threads can concurrently read STL containers, & read / write different elements, without problems.
-threads can concurrently access cin / cout, though the characters will be interleaves. any other stream objects (file streams, string streams, stream buffers) lead to undefined behavior
-atexit() and at_quick_exit() can also be called concurrently
-allocators are objects that work behind the scenes to handle memory allocation / deallocation efficiently. rarely libraries define custom allocators. most programs & operations use the default allocator (ch 19 for details).

__________________________________________________________________________________________________________
CHAPTER 5 - UTILITIES

-





pg 59 chapter 5 start


______________________________________________________________________________________________
